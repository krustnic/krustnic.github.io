{"name":"Krustnic.github.io","tagline":"ITsin blog","body":"Кое-что об AJAX\r\n---------------\r\n\r\nСложно представить себе современное веб-приложение, в котором не использовался бы AJAX. Под этой аббревиатурой скрывается технология, которая позволяет из JavaScript-а подгружать данные с сервера. При этом происходит это невидимым для пользователя образом - не прирывая его текущую работу. На JQuery это выглядит следующим образом:\r\n\r\n    $.post(\"/getData.php\", { id = 1 }, function( response ) {\r\n        //делаем что-то с полученными данными\r\n    }\r\n    \r\nКлючевой особенностью технологии AJAX является callback функция, определяющая какие дейсвия должны быть выполнены в момент получения запрошенных данных с сервера. Благодаря наличию этой функции AJAX запрос исполняется, а javascript переходит к выполнению следующих инструкций не дожидаясь получения непосредственно данных.\r\n\r\nИменно возможность асинхронного выполнения было тем новым, что привнес AJAX. Однако, как показывает практика у многих современных веб-разработчиков AJAX ассоциируется немного с другим. А именно вообще со способностью обращаться к серверу из JavaScript-а. Таким образом даже в тех редких (действительно редких) случаях, когда требуется выполнить синхронный запрос к серверу - все равно используется AJAX.\r\n\r\nСвязано это, видимо, с не достаточно глубоким понимаем того, как же реализуется AJAX. Кое-что об этом я и решил написать.\r\n\r\nВо первых AJAX это не самостоятельная технология, а лишь способ использования уже давно существовавших. Основным компонентом AJAX является JavaScript объект - `XMLHttpRequest`. Собственно именно через этот объект и происходит сам запрос данных с сервера. Простейшая реализация AJAX выглядит следующим образом:\r\n\r\n    function ajax(url, data, onResponse) {\r\n        xmlhttp = new XMLHttpRequest();\r\n        xmlhttp.open('GET', url, true);\r\n        xmlhttp.onreadystatechange = function() {\r\n            if (xmlhttp.readyState == 4) {\r\n                if(xmlhttp.status == 200) {\r\n                    onResponse(xmlhttp.responseText);\r\n                }\r\n            }\r\n        }\r\n        xmlhttp.send(data);\r\n    }\r\n    \r\nА пример вызова:\r\n\r\n    ajax(\"/getData.php\",{}, function( data ) { console.log( data ) });\r\n\r\nПосле создания самого объекта XMLHttpRequest мы вызываем его метод open - указываем тип запроса (GET), URL и устанавливаем флаг асинхронности. Затем мы определяем callback функцию, которая будет вызвана когда состояние запроса изменится. В данной функции происходит проверка текущего статуса, и в случае если запрос совершился успешно - мы вызываем необходимую нам функцию и передаем ей в качестве параметра данные, которые вернул сервер.\r\n\r\nКак видно из примера, за асинхронность запроса отвечает третий параметр метода open. И если нам вдруг понадобиться выполнить синхронный запрос к серверу, который заблокирует выполнения всего JavaScript до тех пор пока результат не будет получен, мы можем сделать слудющее:\r\n\r\n    function syncRequest(url, data) {\r\n        xmlhttp = new XMLHttpRequest();\r\n        xmlhttp.open('GET', url, false);\r\n        xmlhttp.send(data);\r\n        return xmlhttp.responseText;\r\n    }\r\n\r\nПример вызова:\r\n\r\n    var data = syncRequest(\"/getData.php\", {});\r\n\r\nТаким образом, этой заметкой я хотел бы напомнить всем, что сутью AJAX является именно асинхроннсть - т.е. не блокирующий способ взаимодействия с сервером.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}